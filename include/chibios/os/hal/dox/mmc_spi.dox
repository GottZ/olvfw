/*
    ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
                 2011,2012 Giovanni Di Sirio.

    This file is part of ChibiOS/RT.

    ChibiOS/RT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    ChibiOS/RT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * @defgroup MMC_SPI MMC over SPI Driver
 * @brief Generic MMC driver.
 * @details This module implements a portable MMC/SD driver that uses a SPI
 *          driver as physical layer. Hot plugging and removal are supported
 *          through kernel events.
 * @pre     In order to use the MMC_SPI driver the @p HAL_USE_MMC_SPI and
 *          @p HAL_USE_SPI options must be enabled in @p halconf.h.
 *
 * @section mmc_spi_1 Driver State Machine
 * The driver implements a state machine internally, not all the driver
 * functionalities can be used in any moment, any transition not explicitly
 * shown in the following diagram has to be considered an error and shall
 * be captured by an assertion (if enabled).
 * @if LATEX_PDF
 * @dot
  digraph example {
    size="5, 7";
    rankdir="LR";
    node [shape=circle, fontname=Helvetica, fontsize=8, fixedsize="true", width="0.9", height="0.9"];
    edge [fontname=Helvetica, fontsize=8];

    any [label="Any State"];
    stop2 [label="MMC_STOP\nLow Power"];
    uninit [label="MMC_UNINIT", style="bold"];
    stop [label="MMC_STOP\nLow Power"];
    wait [label="MMC_WAIT\nWaiting Card"];
    inserted [label="MMC_INSERTED\nCard Inserted"];
    ready [label="MMC_READY\nCard Ready"];
    reading [label="MMC_READING\nReading"];
    writing [label="MMC_WRITING\nWriting"];

    uninit -> stop [label="mmcInit()"];
    stop -> wait [label="mmcStart()", constraint=false];
    wait -> inserted [label="insertion (inserted event)"];
    inserted -> inserted [label="mmcDisconnect()"];
    inserted -> ready [label="mmcConnect()"];
    ready -> ready [label="mmcConnect()"];
    ready -> inserted [label="mmcDisconnect()"];
    ready -> reading [label="mmcStartSequentialRead()"];
    reading -> reading [label="mmcSequentialRead()"];
    reading -> ready [label="mmcStopSequentialRead()"];
    reading -> ready [label="read error"];
    ready -> writing [label="mmcStartSequentialWrite()"];
    writing -> writing [label="mmcSequentialWrite()"];
    writing -> ready [label="mmcStopSequentialWrite()"];
    writing -> ready [label="write error"];
    inserted -> wait [label="removal (removed event)"];
    ready -> wait [label="removal (removed event)"];
    reading -> wait [label="removal (removed event)"];
    writing -> wait [label="removal (removed event)"];

    any -> stop2 [label="mmcStop()"];
  }
 * @enddot
 * @else
 * @dot
  digraph example {
    rankdir="LR";
    node [shape=circle, fontname=Helvetica, fontsize=8, fixedsize="true", width="0.9", height="0.9"];
    edge [fontname=Helvetica, fontsize=8];

    any [label="Any State"];
    stop2 [label="MMC_STOP\nLow Power"];
    uninit [label="MMC_UNINIT", style="bold"];
    stop [label="MMC_STOP\nLow Power"];
    wait [label="MMC_WAIT\nWaiting Card"];
    inserted [label="MMC_INSERTED\nCard Inserted"];
    ready [label="MMC_READY\nCard Ready"];
    reading [label="MMC_READING\nReading"];
    writing [label="MMC_WRITING\nWriting"];

    uninit -> stop [label="mmcInit()"];
    stop -> wait [label="mmcStart()", constraint=false];
    wait -> inserted [label="insertion (inserted event)"];
    inserted -> inserted [label="mmcDisconnect()"];
    inserted -> ready [label="mmcConnect()"];
    ready -> ready [label="mmcConnect()"];
    ready -> inserted [label="mmcDisconnect()"];
    ready -> reading [label="mmcStartSequentialRead()"];
    reading -> reading [label="mmcSequentialRead()"];
    reading -> ready [label="mmcStopSequentialRead()"];
    reading -> ready [label="read error"];
    ready -> writing [label="mmcStartSequentialWrite()"];
    writing -> writing [label="mmcSequentialWrite()"];
    writing -> ready [label="mmcStopSequentialWrite()"];
    writing -> ready [label="write error"];
    inserted -> wait [label="removal (removed event)"];
    ready -> wait [label="removal (removed event)"];
    reading -> wait [label="removal (removed event)"];
    writing -> wait [label="removal (removed event)"];

    any -> stop2 [label="mmcStop()"];
  }
 * @enddot
 * @endif
 *
 * @ingroup IO
 */
